generator client {
  provider = "prisma-client-js"
}

generator docs {
  provider              = "node node_modules/prisma-docs-generator"
  includeRelationFields = "true"
}

datasource db {
  provider     = "postgres"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Extra_Activity {
  Id          Int                  @id @default(autoincrement())
  Name        String?              @db.VarChar(50)
  Description String?              @db.VarChar(200)
  Price       Decimal?             @db.Decimal(10, 2)
  Image       String?              @db.VarChar(200)
  Start_date  DateTime?            @db.Date
  Final_Date  DateTime?            @db.Date
  User        UserActivity[]
  PaymentDetails PaymentDetail[]
}

model Period {
  Id         Int       @id @default(autoincrement())
  Name       String?   @db.VarChar(100)
  Price      Decimal?  @db.Decimal(10, 2)
  Start_date DateTime? @db.Date
  Final_Date DateTime? @db.Date
  Grade      Grade[]
  PaymentDetails PaymentDetail[]
}

model Grade {
  Id        Int      @id @default(autoincrement())
  Name      String?  @db.VarChar(20)
  Id_Period Int
  Period   Period @relation(fields: [Id_Period], references: [Id])
  Group     Groups[]

  @@index([Id_Period], map: "Id_Period")
}

model Groups {
  Id       Int     @id @default(autoincrement())
  Name     String? @db.VarChar(50)
  Quota     Int?
  Id_Grade Int
  User     Users[]
  Grade    Grade  @relation(fields: [Id_Grade], references: [Id])

  @@index([Id_Grade], map: "Id_Grade")
}

model Payments {
  Id             Int                  @id @default(autoincrement())
  Mount          Decimal              @db.Decimal(10, 2)
  Payment_Date  DateTime             @default(now()) @db.Timestamp(0)
  Payment_Method Int
  Regerence     String               @db.Char(10)
  Status         String               @db.VarChar(50)
  Id_User        Int
  User           Users                @relation(fields: [Id_User], references: [Id])
  Detail         Int
  PaymentDetail     PaymentDetail @relation(fields: [Id], references: [Id])

  @@index([Id_User], map: "Idx_User")
  @@index([Id])
}

enum EnumRol {
  ADMIN
  FATHER
  CHILDREN
}

model Users {
  Id            Int            @id @default(autoincrement())
  Name          String?        @db.VarChar(100)
  Email         String?        @unique @db.VarChar(50)
  Password      String?        @db.VarChar(200)
  Profile_Photo String?        @db.VarChar(200)
  Id_Group      Int?
  Rol           EnumRol?       @default(FATHER)
  refreshToken  String?        @db.VarChar(50)
  Id_tutor      Int?
  Firs_Name     String?        @db.VarChar(100)
  Last_Name     String?        @db.VarChar(100)
  DeatilId  Int?
  Group         Groups?        @relation(fields: [Id_Group], references: [Id])
  Tutor         Users?         @relation("Padreada", fields: [Id_tutor], references: [Id], onDelete: Restrict, onUpdate: Restrict)
  TutorOf       Users[]        @relation("Padreada")
  Payments      Payments[]
  Activity      UserActivity[]
  Details       PaymentDetail? @relation(fields: [DeatilId],references: [Id])

  @@index([Id_Group], map: "Id_Group")
  @@index([Id_tutor])
  @@index([DeatilId])
}

model UserActivity {
  Id_User     Int
  Id_Activity Int
  User        Users          @relation(fields: [Id_User], references: [Id])
  Activity    Extra_Activity @relation(fields: [Id_Activity], references: [Id])

  @@id([Id_User, Id_Activity])
  @@index([Id_User])
  @@index([Id_Activity])
}

model PaymentDetail {
  Id          Int       @id @default(autoincrement())
  Id_Payment  Int
  Id_Activity Int
  TotalMount  Int
  Description String
  User        Users[]
  Payment     Payments[]  
  Activities  Extra_Activity[] 
  Periods     Period[]

  @@index([Id_Payment])
  @@index([Id_Activity])
}	
